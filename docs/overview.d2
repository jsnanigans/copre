# Direction: down
# Layout: elk

# Inputs
oldText: "`oldText` (string)"
newText: "`newText` (string)"

# Processing Steps
step1: "1. Calculate Diffs\n(using go-diff/diffmatchpatch)" {
  shape: step
}
step2: "2. Analyze Diffs\nIdentify first `charsRemoved` & its `originalChangeStartPos` in `oldText`" {
  shape: step
}
step3: "3. Find & Score Anchors in `oldText`\n- Find other occurrences of `charsRemoved`\n- Exclude original occurrence\n- Compare line context (prefix/affix)\n- Calculate Score" {
  shape: step
}
step4: "4. Generate Predictions\n- Map Anchor `Position` (oldText) -> `mappedPosition` (newText) using Diffs\n- Check if `charsRemoved` exists at `mappedPosition` in `newText`\n- Create `PredictedChange` if it exists" {
  shape: step
}

# Intermediate Outputs
output_diffs: "Diff Operations" { shape: document }
output_analysis: "Identified `charsRemoved`, `originalChangeStartPos`" { shape: document }
output_anchors: "List[Anchor] with Scores" { shape: document }

# Final Output
output_predictions: "List[`PredictedChange`]" { shape: document }

# Connections
oldText -> step1
newText -> step1
step1 -> output_diffs

output_diffs -> step2
oldText -> step2 # Needed for analysis context
step2 -> output_analysis

output_analysis -> step3
oldText -> step3 # Needed for finding/scoring
step3 -> output_anchors

output_anchors -> step4
output_diffs -> step4 # Needed for mapping positions
output_analysis -> step4 # Need `charsRemoved`
newText -> step4 # Need `newText` to check within
step4 -> output_predictions 